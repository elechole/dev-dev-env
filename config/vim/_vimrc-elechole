set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
"runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"=========== By elechole

"man
map <F1> K
"save
map <F2> :w!<CR>
"folding
map <F3> v]}zf
"free folding
map <F4> zo
"explorer window
map <F5> :25vs ./<CR>w
"window change
map <F6> w
"file open
"map <F7> O
"function prototype
"map <F8> [i
"local variable
"map <F9> gd
"comeback
map <F10> ''
"global variable and function
map <F11> 
"global comeback
map <F12> 
"map <PageUp> <C-U><C-U>
"map <PageDown> <C-D><C-D>

"compile and execute
map <C-A> :w!<cr>:!g++ % -o %< -DDEBUG -W -Wall && ./%<<cr>

"Make and error windows
map <C-M>	:wa<cr> :make<cr> :ccl<cr> :cw<cr>

map ,1 :b!1<CR>
map ,2 :b!2<CR>
map ,3 :b!3<CR>
map ,4 :b!4<CR>
map ,5 :b!5<CR>
map ,6 :b!6<CR>
map ,7 :b!7<CR>
map ,8 :b!8<CR>
map ,9 :b!9<CR>
map ,0 :b!10<CR>
map ,w :bw<CR>

"	Remove Windows ^M(ctrl-v ENTER)	:%s/^M//g<CR>
map ,m :g//s///gc<CR>
map ,noi :set noai<CR>:set nocindent<CR>:set nosmartindent<CR>
map ,sei :set ai<CR>:set cindent<CR>:set smartindent<CR>

imap	<silent>	<C-T><C-T> <C-R>=strftime("%Y-%m-%d %T")<CR>

"	Vim 256 Color setting
set t_Co=256
set t_AB=[48;5;%dm
set t_AF=[38;5;%dm

set nocompatible
set nu
syntax on
set history=50
set nobackup
set hlsearch	"	Highlighting Search results
set incsearch	"	Highlighting Search in real-time
set showmode
set showcmd
set ruler
set showmatch
set mouse=a		"	Mouse drag and copy 
set tabstop=4
set softtabstop=4
set shiftwidth=4
"set expandtab	"	Tab ÏûÖÎ†•ÏùÑ spaceÎ°ú.. TabÏûÖÎ†•ÏùÄ CTRL-V + Tab
set noexpandtab
set cindent
set autoindent
set smartindent
set bg=dark
"set bg=light
set backspace=indent,eol,start
set visualbell		"	Alert ÏùåÏùÑ ÌôîÎ©¥ ÍπúÎ∞ïÏûÑÏúºÎ°ú Î∞îÍøîÎ≥¥Ïó¨Ï£ºÍ∏∞
set ffs=unix,dos,mac
set wmnu			"	Tab ÏûêÎèôÏôÑÏÑ± Í∞ÄÎä•Ìïú Î™©Î°ù Î≥¥Ïù¥Í∏∞
set ru				"	cursor ÏúÑÏπò Ìï≠ÏÉÅ Î≥¥Ïù¥Í∏∞
"set statusline=%<%n:%t\ (%f)\ %h%m%r%w%y%=%-20.(line:%l/%L\ col:%c%V%)\ (%P)	" ÏÉÅÌÉúÌëúÏãúÏ§Ñ Ìè¨Îß∑ÌåÖ
set statusline=%<%n:\ %t\ (%f)\ %=[%{&ff}:%{&fenc}]%h%r%w%y%m\ %-20(line:\ %l/%L\ col:\ %c%V%)\ (%P)	" ÏÉÅÌÉúÌëúÏãúÏ§Ñ Ìè¨Îß∑ÌåÖ
set laststatus=2	"	statusline Ìï≠ÏÉÅ ÏºúÍ∏∞

"set comments=sl:/*,mb:*,elx:*/
set ic				"	ignorecase	Í≤ÄÏÉâÏãú ÎåÄÏÜåÎ¨∏Ïûê Íµ¨Î∂Ñ ÏóÜÏù¥ Í≤ÄÏÉâ
"	smartcase	ÏÜåÎ¨∏ÏûêÎ°ú Í≤ÄÏÉâ: ÎåÄÏÜåÎ¨∏Ïûê Íµ¨Î∂ÑÏóÜÏù¥ Í≤ÄÏÉâÏãú
"				ÎåÄÎ¨∏Ïûê ÏûàÏúºÎ©¥: ÎåÄÏÜåÎ¨∏Ïûê Íµ¨Î∂ÑÌïòÏó¨ Í≤ÄÏÉâ
set scs

" show file encoding in vim status line  
if has("statusline")  
	"set statusline=%< %f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\	&bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P  
endif  

se cursorline
autocmd InsertEnter * hi CursorLine term=none cterm=none ctermbg=17 guibg=#000060
autocmd InsertLeave * hi CursorLine term=none cterm=none ctermbg=236 guibg=#303030
autocmd VimEnter * hi CursorLine term=none cterm=none ctermbg=236 guibg=#303030
"autocmd InsertLeave * hi CursorLine term=none cterm=reverse

"============= ctag config ==============
"set tags=./tags
set tags=.\\tags
"set tags+=c/WinAVR/avr/tags
"set tags+=/usr/avr/tags
"set tags+=/usr/include/tags
"set tags+=/usr/src/linux-source-2.6.27/tags
"set tags+=/usr/src/linux-headers-2.6.28-18/tags

if has("autocmd")
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal g'\"" |
    \ endif
endif

if version >= 500

func! Sts()
let st = expand("<cword>")
exe "sts ".st
endfunc

nmap ,st :call Sts()<cr>

func! Tj()
let st = expand("<cword>")
exe "tj ".st
endfunc

nmap ,tj :call Tj()<cr>

"============ dic config =============
func! Edic_naver()
let sed = expand("<cword>")
new 
exec "r! eedic.sh ".sed
"set nomodifiable wrap
set modifiable wrap
endfunc

nmap ,ed :call Edic_naver()<cr>gg

func! KEdic()
let ske = expand("<cword>")
new
exec "r! engdic.sh ".ske
set nomodifiable wrap
noremap <buffer> q :bd<cr>:echo ''<cr>
endfunc

nmap ,ke :call KEdic()<cr>gg

"============ man config ==============
"func! Man()
"let sm = expand("<cword>")
"exec "!man -S 2:3:4:5:6:7:8:9:tcl:n:l:p:o ".sm
"endfunc

"nmap ,ma :call Man()<cr><cr>

func! Man()
let sm = expand("<cword>")
new
exec "r! man -S 2:3:4:5:6:7:8:9:tcl:n:l:p:o ".sm
set nomodifiable wrap
endfunc

nmap ,ma :call Man()<cr>gg

endif

"enable C++ line style comments
let c_cpp_comments = 0
"Do highlighting similarly to the C syntax file supplied with VIM
"let c_c_vim_compatible = 1
let c_gnu = 1
let c_C99 = 1
let c_syntax_for_h = 1

if has("gui_running")
	"set textwidth=80
	set guioptions-=T "remove Toolbar
	set guioptions+=b
	"set guioptions-=m "remove memu bar
	"set guioptions+=b "bottom scroll bar 
	"set nowrap 
	set wrap 

	"set gfn=Courier\ New:h10
	map <A-SPACE> :simalt~x <CR>
	map <C-SPACE> :simalt~r <CR>

	winp 0 0
	win 130 50
	"set scrolloff=3
endif

"set gfn=courier10pitch
set gfn=LucidaSansTypewriter\ 9
"set fileencodings=euckr,utf-8
set fileencodings=utf-8,euckr

"set gfn=Crizin_Code:h9:cANSI
set gfn=Bitstream\ Vera\ Sans\ Mono:h9:cANSI
behave xterm

"colorscheme torte
colorscheme elechole_colorscheme

highlight Cursor guibg=Red guifg=Black ctermbg=Red ctermfg=Black
highlight CursorIM guibg=Blue guifg=NONE ctermbg=Blue ctermfg=NONE

set nocsverb
 if filereadable("cscope.out") 
 else 
     if $ANDROID_BUILD_TOP !=""
         "This assumes you have sourced the Android build environment
         cscope add $ANDROID_BUILD_TOP/cscope.out    
  else
         "Or, you can point to your android source directory in $ANDROID_DIR 
         cscope add $ANDROID_DIR/cscope.out
     endif 
 endif

"============= Like a Source Insight =============‚Äù
"== Taglist ===
" // The switch of the Taglist
nmap <F7> :TlistToggle<CR>

"let Tlist_Ctags_Cmnd = "/usr/bin/ctags"
"let Tlist_Ctags_Cmd = "\"C:\\Program Files\\Vim\\vimfiles\\ctags57\\ctags.exe\""
"let Tlist_Ctags_Cmd = "\"c:\\Program Files\\Vim\\ctags57\\ctags\""
let Tlist_Ctags_Cmd = "\"c:\\Program Files (x86)\\Vim\\ctags57\\ctags\""
let Tlist_Inc_Winwidth = 0
let Tlist_Exit_OnlyWindow = 1
let Tlist_Auto_Open = 0
let Tlist_Use_Left_Window = 1
"let Tlist_Use_Right_Window=1

"=== NERDTree ===
" // The switch of the NERDTree
nmap <F9> :NERDTreeToggle<CR>

let NERDTreeWinPos = "right"

"=== Source explorer ===
"// Map the keys below to jump from one window to another:
"nmap <C-H> <C-W>h
"nmap <C-J> <C-W>j
"nmap <C-K> <C-W>k
"nmap <C-L> <C-W>l

"map <F3> :tnext<CR>
"map <F2> :tprevious<CR>

" // The switch of the Source Explorer
"nmap <F8> :SrcExplToggle<CR>
nmap <F8> :TrinityToggleAll<CR>

" // Set the height of Source Explorer window
let g:SrcExpl_winHeight = 8

" // Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 100

" // Set "Enter" key to jump into the exact definition context
" let g:SrcExpl_jumpKey = "<ENTER>"

" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

" // In order to Avoid conflicts, the Source Explorer should know what plugins
" // are using buffers. And you need add their bufname into the list below
" // according to the command ":buffers!"
let g:SrcExpl_pluginList = [
        \ "__Tag_List__",
        \ "_NERD_tree_",
        \ "Source_Explorer"
    \ ]

" // Enable/Disable the local definition searching, and note that this is not
" // guaranteed to work, the Source Explorer doesn't check the syntax for now.
" // It only searches for a match with the keyword according to command 'gd'
let g:SrcExpl_searchLocalDef = 1

" // Do not let the Source Explorer update the tags file when opening
let g:SrcExpl_isUpdateTags = 0

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
" //  create/update a tags file
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."

" // Set "<F12>" key for updating the tags file artificially
let g:SrcExpl_updateTagsKey = "<F12>"

