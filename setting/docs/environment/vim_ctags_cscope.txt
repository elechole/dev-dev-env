1. 해당 디렉토리에 tags 파일 생성
    ctags -R ./ .....
2. cscope 파일 생성
    mkcscope.sh
        CTRL-d
3. vi go-go----

=======================================
vim
bvi: binary VI
=======================================
    :set expandtab  //  Tab -> space
    :retab
    tab 문자 삽입: ctrl + v <tab>

    tab 삽입: >>
    여러라인 tab 삽입:블록 지정 후 >>

    블록지정: v, shift - v(line block), ctrl - v(visual block)

    들여쓰기 정렬: =, 블록 지정후 =
        ex) 100 = 아래 화살표
    마침표(.)   :   마지막 수행한 명령 반복
    u   : undo
    CTRL + r : undo한 명령 다시 실행

    :%s/[ ^\t]*$//g     : 줄 끝 공백 및 tab 제거
    :%s/$//g          : ^M 제거(CTRL + V, CTRL + M = ^M)

    CTRL + z : 현재 vim을 background로 돌림.. 쉘로 빠지며, 돌아올땐 fg
    <ESC> 문자 입력: CTRL + V, CTRL + key
    :set ff=unix
    긴라인에서 아래로 이동하려면 g를 누르고, 화살표..
    :noh    :   search highlight 된 것 없애기

    :grep .........

# make in vi(.vimrc)
	map <C-M>	:wa<cr> :make<cr> :ccl<cr> :cw<cr>

    :cw     : Quickfix Window
    :r! <bash command> : shell 결과를 vim으로 가져와 붙임

    :cn[ext] --> quickfix window에서 하일라이트 되어 있는 항목의 다음 항목으로 이동
    :cp[rev] --> 이전 항목으로 이동
    :cope[n] --> quickfix window 를 표시함
    :ccl[ose] --> quickfix window 를 닫음
                (닫는다고 그 안의 내용이 사라지는 것은 아님. :copen 을 하면 고스란히 남아 있는 내용을 볼 수 있음)
    위의 두 가지 커맨드를 map 해 두고 사용하면 매우 편리하다 :
        nnoremap <silent> <F1> :cp<cr> " 이전 에러 라인으로
        nnoremap <silent> <F2> :cn<cr> " 다음 에러 라인으로

    [[ : 이전의 { 찾기
    ]] : 이후의 { 찾기
    [] : 이전의 } 찾기
    ][ : 이후의 } 찾기

    !l 명령 ==> vim에 명령 결과 출력

    :sp <file>: 가로로 창나누기
    :vs <file>: 세로로 창나누기
    :vertical resize = XX or +XX

    :hi : 현재의 highlight 설정 출력

    CTRL + w + w, CTRL + w + 화살표 : 창 이동
    CTRL + w + _ : 현재 커서가 있는 창을 크게

    CTRL + w + + : 창 크기 확대
    CTRL + w + - : 창 크기 축소
    :resXX : 현재창 크기를 xx로
    CTRL + w + = : 모든 창을 같은 크기로...

    CTRL + w + c : 현재창닫기

    CTRL + wf : 헤더파일명 위에서 누르면 수평분할되어 파일 열림

##  Tab in Vim
    :Tex
    gt : 다음창
    gT : 이전창
    c-w gf : 커서아래 파일이름을 새탭으로 열기
    c-w gF : 커서아래 파일이름을 새탭으로 열고 커서 다음에 있는 행 표시로 이동하기
    :tabnew : 빈 탭 만들기
    c-w c 로 하나씩 없애면되겠습니다.
    C-PgUp C-PgDn 으로 이동하면됩니다

## 찾기 바꾸기...

    1. 문서 처음부터 마지막까지의 char 를 _char_ 로 치환한다.
        :%s/char/_&_/g

    2. 현재(커서위치)부터 마지막까지의 char 를 _char_ 로 치환한다.
        :.,$s/char/_&_/g

    3. buf_.*[255], buf_in[255], buf_get[255] 와 같은 문자열을 hello 로 변경한다.
        :1,10s/buf_.*\[255\]/hello/g

    4. 숫자로만 이루어진 행 찾기는 다음과 같습니다.
        /^\d\+$
            ^ : 행의 첫부분
            \d : 0~9까지의 숫자
            + : 바로 앞의 글자 (여기서는 숫자)가 1개나 1개 이상 있음. (즉 숫자가 최소한 1개 있음)
            $ : 행의 마지막 부분

    5. 전체 문서에서 add 를 plus로 치환
        :s/add/plus/g

    6. 현재 편집중인 전체 문서에서 /etc/ 를 /etc/local/ 로 치환
        :s/\/etc\//\/etc\/local\//g

    7. '앗싸좋구나108계단' 이 '좋구나108계단앗싸' 로 바뀝니다.
        :%s/\(앗싸\)\(좋구나\)\(108계단\)/\2\3\1/g

    8. 대소문자 구분없이 바꾸려면 i 옵션을 붙입니다. 이것은 ".vimrc" 파일을 고치지 않아도 작동합니다.
        :%s/foo/bar/i

    9. 정확하게 foo에 일치될 때만 바꿉니다. 즉 foo는 바꾸지만, foo 앞뒤로 다른 문자열이 붙어 있는 경우에는 바꾸지 않습니다.
        :%s/\/bar

    10. 정렬
        123 def ghi
        432 ius dkf
        089 cdo lks

        이걸 숫자를 가운데로, 두번째는 끝, 세번째 처음으로 보내려면

            :%s/\([0-9]*\) \([a-z]*\) \([a-z]*\)/\3 \2 \1/g

    11. 만약 3~5자리로 이루어진 모든 숫자를 검색하고 싶다면 다음과 같이 입력한다.
        /[0123456789]\{3,5\} 또는
        /[0-9]\{3,5\}

    12. 만약 `ab'로 시작하는 소문자로 되어 있는 모든 단어를 삭제하려면 다음과 같이 입력한다.
        :%s/ab[a-z]*//g

    13. 만약 test라는 파일에 cpu가 들어있는 라인을 모조리 지우고자 한다면 vi mode에서 아래와 같이 사용한다.
        :g/cpu/d
            # g는 모든 라인에 적용한다라는 의미이고,
            # d는 delete를 의미합니다.

    14. stat0,stat1.....stat9 패턴이 있는 라인을 모조리 지우기
        :g/stat[0-9]/d

    15. 빈 줄 두 줄을 한 줄로 바꾸기
        :%s/\n\n/\n/g

    16. 두 칸을 한 칸으로 줄이기
        :%s/ / /g

    17. 탭을 스페이스 공백으로 바꾸기
        :%s/\t/ /g

    18. 마지막에 한 칸 띠우고 엔터된 것을 바로 엔터한 것으로 고치기
        :%s/ $//g 또는
        :%s/ \n/\n/g

    19. 줄 첫 칸의 띠어쓰기를 없애기
        :%s/^ //g

    20. 잘못 바꾸기를 했을 때 되돌리려면 그냥 u 키를 누르면 됩니다.
    
=======================================
ctag
=======================================
    # vi -t <tag>

    :ta <symbol> - <symbol>을 찾아 이동, 소스파일의 찾을 symbol 위에서 ctrl-] 해도 됨
    :tj <symbol> - <symbol>이 있는 위치로 이동

    :ts <symbol> - <symbol>이 있는 위치를 선택하여 이동, Symbol 위에서 “g + ]” 해도 동일한 효과
    :sts <tag> : 수평분할하여 결과를 나타냄

    :tags – 현재 tag 스택을 보여줌.

    CTRL + ] : 태그로 이동(:ta)
    g + CTRL + ] : 여러개일 경우 선택할 수 있음(:ts)
                    map <C-]> :tjump <C-R>=expand("<cword>")<CR><CR>

    CTRL + t : tag 스택의 상위로(이전 위치로) 이동

=======================================
cscope 사용법
=======================================
------------ mkcscope.sh --------------
#!/bin/sh
rm -rf cscope.files cscope.file
find . \( -name '*.c' -o -name '*.cpp' -o -name '*.cc' -o -name '*.h' -o -name '*.s' -o -name '*.S' \) -print > cscope.file
	## symbolic 링크 제외하는 방법(-type f)
	find . \( -name '*.[cCsShH]' -o -name '*.cpp' -o -name '*.cc' \) -type f -print > cscope.files
cscope -i cscope.files   => CTRL-D 로 빠져나와야 함.
cscope -b -i cscope.files   => CTRL-D 필요없음
---------------------------------------
-------------- .vimrc -----------------
set csprg=/usr/bin/cscope
set csto=0(숫자 0)
set cst
set nocsverb

"add any database in current directory
if filereadable("./cscope.out")
    cs add cscope.out
"else add database pointed to by environment
else
    cs add /usr/src/linux/cscope.out
endif
set csverb
---------------------------------------
    :cs find {질의종류} {심벌}
        ex) cs find s start_kerne

            cscope 의 질의 종류
                0 or s  - > Find this C symbo
                1 or g  - > Find this definition
                2 or d  - > Find functions called by this function
                3 or c  - > Find functions calling this function
                4 or t  - > Find assignments to
                6 or e  - > Find this egrep pattern
                7 or f   - > Find this File
                8 or i   - > Find files #including this file
---------------------------------------
=======================================
Taglist plugin
=======================================
    - Manual(http://vim-taglist.sourceforge.net/manual.html)

    - ~/.vim/doc, ~/.vim/plugin 에 설치
    .vimrc 파일에 필수적으로 추가할 내용
        filetype on
    .vimrc 파일에 선택적으로 추가할 내용
        let Tlist_Ctags_Cmd="/usr/bin/ctags“
        let Tlist_Inc_Winwidth=0
        let Tlist_Exit_OnlyWindow = 1
        let Tlist_Auto_Open=1
    - :TlistToggle

    - Taglist 단축키
        <CR> - tag의 정의로 이동
        <SPACE> - tag 의 prototype을 표시
        u – tag 목록을 갱신
        x – tag list 창을 확대/축소
        + - 플딩 열기 (* - 모든 폴딩 열기)
        - - 폴딩 접기 (= - 모든 폴딩 접기)
        [[ 또는 <BACKSPACE> - 이전 파일의 시작위치로
        ]] 또는 <TAB> - 다음 파일의 시작위치로
        q – taglist 창 닫기
        <F1> - 도움말

=======================================
a.vim plugin
=======================================
    :A switches to the header file corresponding to the current file being edited (or vise versa)
    :AS splits and switches
    :AV vertical splits and switches
    :AT new tab and switches
    :AN cycles through matches
    :IH switches to file under cursor
    :IHS splits and switches
    :IHV vertical splits and switches
    :IHT new tab and switches
    :IHN cycles through matches
    <Leader>ih switches to file under cursor
    <Leader>is switches to the alternate file of file under cursor (e.g. on  <foo.h> switches to foo.cpp)
    <Leader>ihn cycles through matches

=======================================
The fold commands
=======================================
Command 	 
zA 	Toggle the state of folds, recursively
zC 	Close folds, recursively
zD 	Delete folds, recursively
zO 	Open folds, recursively
zE 	Eliminate all folds
zf + %	Create a fold from the current line to the one where the following motion command takes a cursor
countzF 	Create a fold covering count lines, starting with the current line
zM 	Set option foldlevel to 0
zN, zn 	Set (zN) or reset (zn) the foldenable option
za 	Toggle the state of one fold
zc 	Close one fold
zd 	Delete one fold
zi 	Toggle the value of the foldenable option
zj ,zk 	Move cursor to the start (zj) of the fold or to the end (zk) of the previous fold
zm, zr 	Decrement (zm) or increment (zr) the value of the foldlevel option by one
zo 	Open one fold